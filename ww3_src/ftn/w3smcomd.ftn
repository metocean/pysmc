      MODULE W3SMCOMD
!/
!/                  +-----------------------------------+
!/                  | WAVEWATCH III           NOAA/NCEP |
!/                  |        Chris Bunney, UKMO         |
!/                  |                        FORTRAN 90 |
!/                  | Last update :         12-Jan-2016 |
!/                  +-----------------------------------+
!/
!/    18-Jan-2016 : Initial version.                    ( version 4.18 )
!/                        (Chris Bunney, UK Met Office)
!/
!/    Copyright 2009-2012 National Weather Service (NWS),
!/       National Oceanic and Atmospheric Administration.  All rights
!/       reserved.  WAVEWATCH III is a trademark of the NWS. 
!/       No unauthorized use without permission.
!/
!  1. Purpose :
!
!     Service module for support of SMC => regular grid output
!
!  2. Method :
!
!     For SMC grids, two types of output are possible:
!       1 - Flat grid (seapoint) output of SMC cells with associated
!           cell size variables (cx and cy). Requires extra effort to
!           plot as grid is not regular.
!       2 - Regular, uniformly gridded output to a specified output grid.
!           This is achieved by area averaging of the SMC cells. The output
!           grid will be aligned with the SMC grid cell edges which may 
!           result in the actual output grid being slightly different to
!           the original user request. A land/sea mask is created by
!           keeping track of the cell coverage and setting cells with
!           total coverage of <50% UNDEF.
!
      USE W3GDATMD
      USE CONSTANTS
        
      PUBLIC

      ! Output grid definition
      REAL                    :: SXO, SYO, EXO, EYO      ! First lat/lons ...
      REAL                    :: DXO, DYO                ! ... grid size ...
      INTEGER                 :: NXO, NYO                ! ... and number grid cells.

      ! Variables for SMC regridding:
      INTEGER                 :: SMCTYPE                 ! Type of SMC output
      INTEGER                 :: CELFAC                  ! Requested output cell scaling factor
      INTEGER, ALLOCATABLE    :: XIDX(:), YIDX(:)        ! Indices of SMC cells into regular grid
      INTEGER, ALLOCATABLE    :: XSPAN(:), YSPAN(:)      ! How many regualr grid cells SMC grid spans
      REAL, ALLOCATABLE       :: WTS(:), COV(:,:)        ! Regirdding weights and cell coverage (wet fraction)
      INTEGER, ALLOCATABLE    :: MAPSMC(:,:)             ! Regridded MAPSTA
      LOGICAL, ALLOCATABLE    :: SMCMASK(:)              ! Mask for type 1 output (flat array)
      INTEGER, ALLOCATABLE    :: SMCIDX(:)               ! Indices of SMC cells witin output grid domain
      
      INTEGER, ALLOCATABLE    :: smccx(:), smccy(:)      ! Cell size factors
      REAL                    :: dlat, dlon              ! Base lat/lon sizes
      INTEGER                 :: cfac, jeqt              ! SMC scaling factor and equator offset

      ! Counters:
      INTEGER                 :: SMCNOUT, NSMC

      CONTAINS

!--------------------------------------------------------------------------
      SUBROUTINE SMC_INTERP()
      ! This subroutine generates index or mask values for extraction
      ! of SMC data to either a flat grid or regular lat/lon grid,
      ! depending on the type of SMC output grid selected:
      !
      !   Type 1: Generates a mask for extracting only points from
      !           the user requested region.
      !
      !   Type 2: Calculate interpolation indices and weights for
      !           regridding the irregular SMC grid onto a regular,
      !           uniformly spaced lat/lon grid.
      !
      ! Chris Bunney, UK Met Office. 22-Oct-2015
      
      IMPLICIT NONE
      
      ! Locals
      REAL    :: CX0, CY0   ! SW corner of origin of grid

      INTEGER :: ISEA, mx, my, ixx, iyy, J
      REAL    :: lat, lon

      J = 1
      NSMC = 0

      ! Determine smallest cell size factor:
      cfac = 2**(NRLv - 1)

      ! Get smallest SMC grid cells step size:
      dlat = SY / cfac
      dlon = SX / cfac

      ! SW Corner of grid origin cell:
      CX0 = X0 - SX / 2.
      CY0 = Y0 - SY / 2.

      ! get equitorial offset
      jeqt = IJKCel(2, 0)

      ! Get start lat,lon (must be aligned with SMC grid edges):
      IF(ABS(SXO + 999.9) .LT. 1E-4) THEN
          SXO = CX0
      ELSE
          SXO = CX0 + INT((SXO - CX0) / SX) * SX
      ENDIF
      IF(ABS(SYO + 999.9) .LT. 1E-4) THEN
          SYO = CY0
      ELSE 
          SYO = CY0 + INT((SYO - CY0) / SY) * SY
      ENDIF

      ! Last lat/lon (-999.9 denotes use full grid)
      IF(ABS(EXO + 999.9) .LT. 1E-4) THEN
          EXO = CX0 + MAXVAL(IJKCel(1,:)) * dlon
      ENDIF
      IF(ABS(EYO + 999.9) .LT. 1E-4) THEN
          EYO = CY0 + MAXVAL(IJKCel(2,:)) * dlat
      ENDIF

      ! Ouput grid cell dx/dy will be integer factor of smallest
      ! SMC grid cell size:
      DXO = dlon * celfac
      DYO = dlat * celfac

      ! Determine number of cells in grid:
      NXO = INT((EXO - SXO) / DXO) + 1
      NYO = INT((EYO - SYO) / DYO) + 1

      IF(SMCTYPE .EQ. 2) THEN
         ! Initialise all indices to "missing":
         XIDX(:) = -1
         YIDX(:) = -1
      ENDIF

      ! Loop over cell array and calculate regidding factors:
      DO ISEA=1, NSEA
!/ARC          ! For grids with Arctic region: make sure we don't double count
!/ARC          ! the overlapping boundary cells. Also, don't process the arctic
!/ARC          ! cell (which is always the last cell).
!/ARC          ! Note: NARC contains ALL the boundary cells (global + arctic).
!/ARC          ! whereas NGLO contains only the global boundary cells.
!/ARC          IF(ISEA .GT. NGLO-NBAC .AND. ISEA .LT. NSEA-NARC+1) CYCLE

          ! Get grid cell size:
          mx = IJKCel(3,ISEA)
          my = IJKCel(4,ISEA)

          ! Determine cell lat/lon
          lon = CX0 + IJKCel(1,ISEA) * dlon
          lat = CY0 + IJKCel(2,ISEA) * dlat

          ! For output type 1 (seapoint array), just check whether
          ! cell centre is within specified domain range, and update
          ! output mask accordingly:
          IF( SMCTYPE .EQ. 1 ) THEN
             ! Ensure longitude ranges are aligned
             lon = lon + 0.5 * mx * dlon
             lat = lat + 0.5 * my * dlat
             IF(lon .LT. SXO) lon = lon + 360.0
             IF(lon .GT. EXO) lon = lon - 360.0

             ! Now check if it is within range of requested domain:
             IF(lon .GE. SXO .AND. lon .LE. EXO .AND.           &
                lat .GE. SYO .AND. lat .LE. EYO ) THEN
                SMCMASK(ISEA) = .TRUE.
                SMCIDX(J) = ISEA
                J = J + 1
             ENDIF
             CYCLE
          ENDIF ! SMCTYPE == 1

          ! For output type 2 (area averaged regular grid), determine
          ! SMC grid cell location and coverage in output grid:

          ! Align lons
          IF(lon .LT. SXO) THEN
              lon = lon + 360.
          ELSE IF(lon .GT. EXO) THEN
              lon = lon - 360.
          ENDIF

          ! Find first SW cell in design grid:
          !ixx = INT((lon - SXO) / DXO) + 1   ! Don't use INT to truncate - it rounds -0.5 to 0,
          !iyy = INT((lat - SYO) / DYO) + 1   ! rather than -1.0. FLOOR does what I expect...
          ixx = FLOOR((lon - SXO) / DXO) + 1
          iyy = FLOOR((lat - SYO) / DYO) + 1

          ! range check:
          IF(ixx .LE. 0 .OR. ixx .GT. NXO) THEN
              xidx(ISEA) = -1
              yidx(ISEA) = -1
              CYCLE
          ENDIF
          IF(iyy .LE. 0 .OR. iyy .GT. NYO) THEN
              xidx(ISEA) = -1
              yidx(ISEA) = -1
              CYCLE
          ENDIF

          XIDX(ISEA) = ixx
          YIDX(ISEA) = iyy
          NSMC = NSMC + 1
          SMCIDX(NSMC) = ISEA

          ! find out how many cells it covers in the x/y directions:
          XSPAN(ISEA) = MAX(1, INT(mx / CELFAC))
          YSPAN(ISEA) = MAX(1, INT(my / CELFAC))

          ! Do a bit of error checking (non fatal - just produced warning):
          IF(XSPAN(ISEA) .GT. 1) THEN
              IF(sxo+(ixx-1)*dxo .NE. lon) THEN
                  print*, 'Potential problem with grid cell span:'
                  print*, xspan(ISEA), FLOAT(mx) / celfac
                  print*, lon,lat
                  print*, sxo+(ixx-1)*dxo,syo+iyy*dyo,dxo,dyo
              ENDIF
          ENDIF

          ! calc cell weight in relation to output grid:
          WTS(ISEA) = MIN(1., REAL(MIN(CELFAC, mx) * MIN(CELFAC, my)) / &
                      (CELFAC**2))

      ENDDO

      ! Reset SXO and SYO to be the cell-centre (currently cell SW edge):
      SXO = SXO + 0.5 * SX
      SYO = SYO + 0.5 * SY

      END SUBROUTINE SMC_INTERP
      
!--------------------------------------------------------------------------

!--------------------------------------------------------------------------
      SUBROUTINE W3S2XY_SMC(S, XY)
      ! Regrid SMC data onto a regular grid using pre-calculated grid
      ! indices and weights.
      ! Chris Bunney, 02-Jul-2013

      USE W3ODATMD, ONLY: UNDEF
 
      IMPLICIT NONE

      ! Input parameters:
      REAL, INTENT(IN)  :: S(:)
      REAL, INTENT(OUT) :: XY(NXO,NYO)

      ! Local parameters
      INTEGER           :: I, J, IX, IY, ISEA, ISMC

      ! Initialise coverage and output arrays:
      COV(:,:) = 0.0
      XY(:,:) = 0.0
    
      DO ISMC=1,NSMC
         ISEA = SMCIDX(ISMC)

         IF(S(ISEA) .EQ. UNDEF) CYCLE   ! MDI

         ! Loop over number of spanned cells:
         DO I=0, XSPAN(ISEA) - 1
            DO J=0, YSPAN(ISEA) - 1
               IX = XIDX(ISEA) + I
               IY = YIDX(ISEA) + J

               ! Spans outside of grid?
               IF(IX .GT. NXO .OR. IY .GT. NYO) CYCLE

               ! Interpolate:
               XY(IX, IY) = XY(IX, IY) + S(ISEA) * WTS(ISEA) 
 
               ! Keep track of how much of cell is (wet) covered:
               COV(IX, IY) = COV(IX, IY) + WTS(ISEA)
            ENDDO
         ENDDO

      ENDDO 

      ! Create coastline by masking out areas with < 50% coverage:
      DO IX=1,NXO
         DO IY=1,NYO
            IF(MAPSMC(IX,IY) .EQ. 0) THEN
               ! Make land point
               ! XY(IX,IY) = UNDEF
            ELSE IF(COV(IX,IY) .LT. 0.5) THEN
               ! More than half of cell has UNDEF values - set to 0.0
               XY(IX,IY) = 0.0
            ELSE IF(COV(IX,IY) .LT. 1.0) THEN
               ! If coverage < 1.0, scale values back to full cell coverage.
               ! Without this step, points around coast could end up with lower
               ! waveheights due to weights not summing to 1.0:
               XY(IX,IY) = XY(IX,IY) * ( 1.0 / COV(IX,IY) )
            ENDIF
         ENDDO
      ENDDO

      RETURN

      END SUBROUTINE W3S2XY_SMC
!--------------------------------------------------------------------------

!--------------------------------------------------------------------------
      SUBROUTINE W3S2XY_SMC_DIR(S, XY)
      ! Regrid SMC data from a directional field onto a regular grid using
      ! pre-calculated grid indices and weights. As W3S2XY_SMC, but
      ! decomposes the field into u/v components first to ensure proper
      ! area averaging of directional data.

      ! Chris Bunney, 02-Jul-2013

      USE W3ODATMD, ONLY: UNDEF
 
      IMPLICIT NONE

      ! Input parameters:
      REAL, INTENT(IN)  :: S(:)
      REAL, INTENT(OUT) :: XY(NXO,NYO)

      ! Local parameters
      INTEGER           :: I, J, IX, IY, ISEA, ISMC
      REAL, ALLOCATABLE :: AUX1(:,:), AUX2(:,:)
      REAL              :: COSS, SINS

      ! Initialise coverage and output arrays:
      ALLOCATE(AUX1(NXO,NYO),AUX2(NXO,NYO))
      COV(:,:) = 0.0
      XY(:,:) = 0.0
      AUX1(:,:) = 0.0
      AUX2(:,:) = 0.0

      DO ISMC=1,NSMC
         ISEA = SMCIDX(ISMC)

         IF(S(ISEA) .EQ. UNDEF) CYCLE   ! MDI
         COSS = COS(S(ISEA))
         SINS = SIN(S(ISEA))

         ! Loop over number of spanned cells:
         DO I=0, XSPAN(ISEA) - 1
            DO J=0, YSPAN(ISEA) - 1
               IX = XIDX(ISEA) + I
               IY = YIDX(ISEA) + J

               ! Spans outside of grid?
               IF(IX .GT. NXO .OR. IY .GT. NYO) CYCLE

               ! Interpolate:
               !XY(IX, IY) = XY(IX, IY) + S(ISEA) * WTS(ISEA) 
               AUX1(IX, IY) = AUX1(IX, IY) + COSS * WTS(ISEA) 
               AUX2(IX, IY) = AUX2(IX, IY) + SINS * WTS(ISEA) 
 
               ! Keep track of how much of cell is (wet) covered:
               COV(IX, IY) = COV(IX, IY) + WTS(ISEA)
            ENDDO
         ENDDO

      ENDDO 

      ! Create coastline by masking out areas with < 50% coverage:
      DO IX=1,NXO
         DO IY=1,NYO
            IF(MAPSMC(IX,IY) .EQ. 0) THEN
               ! Make land point
               XY(IX,IY) = UNDEF
            ELSE IF(COV(IX,IY) .LT. 0.5) THEN
               ! More than half of cell has UNDEF values - set to 0.0
               XY(IX,IY) = 0.0
            ELSE IF(COV(IX,IY) .LT. 1.0) THEN
               ! If coverage < 1.0, scale values back to full cell coverage.
               ! Without this step, points around coast could end up with lower
               ! waveheights due to weights not summing to 1.0:
               XY(IX,IY) = ATAN2(AUX2(IX,IY), AUX1(IX,IY))
               XY(IX,IY) = MOD(630. - RADE * XY(IX,IY), 360. )
            ELSE
               XY(IX,IY) = ATAN2(AUX2(IX,IY), AUX1(IX,IY))
               XY(IX,IY) = MOD(630. - RADE * XY(IX,IY), 360. )
            ENDIF
         ENDDO
      ENDDO

      RETURN

      END SUBROUTINE W3S2XY_SMC_DIR
!--------------------------------------------------------------------------

!--------------------------------------------------------------------------
      SUBROUTINE MAPSTA_SMC()
      ! Calculates a new MATSTA using SMC grid cell averaging.
      ! Chris Bunney, 02-Jul-2013

      IMPLICIT NONE

      ! Local parameters
      INTEGER           :: I, J, IX, IY, IMX, IMY, ISEA

      ! Initialise coverage and output arrays:
      COV(:,:) = 0.0
      MAPSMC(:,:) = 0

      DO ISEA=1,NSEA
         IMX = MAPSF(ISEA,1)
         IMY = MAPSF(ISEA,2)

         IF(XIDX(ISEA) .EQ. -1) CYCLE   ! Out of grid

         ! Loop over number of spanned cells:
         DO I=0, XSPAN(ISEA) - 1
            DO J=0, YSPAN(ISEA) - 1
               IX = XIDX(ISEA) + I
               IY = YIDX(ISEA) + J

               ! Spans outside of grid?
               IF(IX .GT. NXO .OR. IY .GT. NYO) CYCLE

               ! MAPSTA values: 0=Excluded, (+-)1=Sea, (+-2)=Input boundary
               ! We will just keep track of sea and non-sea points:
               IF(MAPSTA(IMY, IMX) .NE. 0) THEN
                  ! Keep track of how much of cell is (wet) covered:
                  COV(IX, IY) = COV(IX, IY) + WTS(ISEA)
               ENDIF
            ENDDO
         ENDDO

      ENDDO 

      ! Create coastline by masking out areas with < 50% coverage:
      DO IX=1,NXO
         DO IY=1,NYO
            IF(COV(IX,IY) .LT. 0.5) THEN
               MAPSMC(IX, IY) = 0
            ELSE
               MAPSMC(IX, IY) = 1
            ENDIF
         ENDDO
      ENDDO

      RETURN

      END SUBROUTINE MAPSTA_SMC
!--------------------------------------------------------------------------
      END MODULE W3SMCOMD
